{
  "version": 3,
  "sources": ["../lib/table.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping data type strings to alignments (in bytes).\n*\n* @private\n* @returns {Object} object mapping data type string to alignments (in bytes)\n*/\nfunction table() {\n\treturn {\n\t\t'binary': 1,\n\n\t\t'bool': 1,\n\n\t\t'complex32': 2,  // same as float16\n\t\t'complex64': 4,  // same as float32\n\t\t'complex128': 8, // same as float64\n\n\t\t'float16': 2,\n\t\t'bfloat16': 2,\n\t\t'float32': 4,\n\t\t'float64': 8,\n\t\t'float128': 16,\n\n\t\t'generic': null,\n\n\t\t'int8': 1,\n\t\t'int16': 2,\n\t\t'int32': 4,\n\t\t'int64': 8,\n\t\t'int128': 16,\n\t\t'int256': 32,\n\n\t\t'uint8': 1,\n\t\t'uint8c': 1,\n\t\t'uint16': 2,\n\t\t'uint32': 4,\n\t\t'uint64': 8,\n\t\t'uint128': 16,\n\t\t'uint256': 32\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = table;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar resolve = require( '@stdlib/ndarray-base-dtype-resolve-str' );\nvar table = require( './table.js' );\n\n\n// VARIABLES //\n\nvar TABLE;\n\n\n// MAIN //\n\n/**\n* Returns the alignment (in bytes) for an underlying array data type.\n*\n* ## Notes\n*\n* -   If provided an unrecognized/unsupported data type, the function returns `null`.\n*\n* @param {*} [dtype] - data type value\n* @returns {(Object|number|null)} alignment (in bytes)\n*\n* @example\n* var obj = dtypeAlignment();\n* // returns {...}\n*\n* @example\n* var out = dtypeAlignment( 'float64' );\n* // returns 8\n*\n* out = dtypeAlignment( 'generic' );\n* // returns null\n*/\nfunction dtypeAlignment( dtype ) {\n\tvar v;\n\tif ( arguments.length === 0 ) {\n\t\treturn table();\n\t}\n\tif ( TABLE === void 0 ) {\n\t\tTABLE = table();\n\t}\n\tv = dtype.alignment;\n\tif ( isPositiveInteger( v ) ) {\n\t\treturn v;\n\t}\n\treturn TABLE[ resolve( dtype ) ] || null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtypeAlignment;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the alignment (in bytes) for an underlying array data type.\n*\n* @module @stdlib/ndarray-base-dtype-alignment\n*\n* @example\n* var dtypeAlignment = require( '@stdlib/ndarray-base-dtype-alignment' );\n*\n* var out = dtypeAlignment( 'float64' );\n* // returns 8\n*\n* out = dtypeAlignment( 'generic' );\n* // returns null\n*\n* @example\n* var dtypeAlignment = require( '@stdlib/ndarray-base-dtype-alignment' );\n*\n* var obj = dtypeAlignment();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA4BA,SAASC,GAAQ,CAChB,MAAO,CACN,OAAU,EAEV,KAAQ,EAER,UAAa,EACb,UAAa,EACb,WAAc,EAEd,QAAW,EACX,SAAY,EACZ,QAAW,EACX,QAAW,EACX,SAAY,GAEZ,QAAW,KAEX,KAAQ,EACR,MAAS,EACT,MAAS,EACT,MAAS,EACT,OAAU,GACV,OAAU,GAEV,MAAS,EACT,OAAU,EACV,OAAU,EACV,OAAU,EACV,OAAU,EACV,QAAW,GACX,QAAW,EACZ,CACD,CAKAD,EAAO,QAAUC,IClEjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAU,QAAS,wCAAyC,EAC5DC,EAAQ,IAKRC,EA0BJ,SAASC,EAAgBC,EAAQ,CAChC,IAAIC,EACJ,OAAK,UAAU,SAAW,EAClBJ,EAAM,GAETC,IAAU,SACdA,EAAQD,EAAM,GAEfI,EAAID,EAAM,UACLL,EAAmBM,CAAE,EAClBA,EAEDH,EAAOF,EAASI,CAAM,CAAE,GAAK,KACrC,CAKAN,EAAO,QAAUK,IC9BjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_table", "__commonJSMin", "exports", "module", "table", "require_main", "__commonJSMin", "exports", "module", "isPositiveInteger", "resolve", "table", "TABLE", "dtypeAlignment", "dtype", "v", "main"]
}
